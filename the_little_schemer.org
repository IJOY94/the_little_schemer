* Book Introduction
Assumed Definitions:
- atom?
  #+begin_src scheme
  (define atom?
  (lambda (x)
      (and (not (pair? x)) (not (null? x)))))
  #+end_src
- add1
  #+begin_src scheme
  (define add1
  (lambda (x)
      (+ x 1)))
  #+end_src
- sub1
  #+begin_src scheme
  (define sub1
    (lambda (x)
      (- x 1)))
  #+end_src
- lat?
  #+begin_src scheme
  (define lat?
    (lambda (l)
      (cond
       ((null? l) #t)
       ((atom? (car l)) (lat? (cdr l)))
       (else #f))))
  #+end_src
- member?
  #+begin_src scheme
  (define member?
    (lambda (a lat)
      (cond
        ((null? lat) #f)
        (else (or (eq? (car lat) a)
                  (member? a (cdr lat)))))))
  #+end_src
* Ten Commandments
1. When recurring on a list of atoms, /lat/, ask two questions about it: (/null? lat/) and *else*.
   When recurring on a number, /n/, ask two questions about it: (/zero? n/) and *else*.
   When recurring on a list of S-expressions, /l/, ask three questions about it: (/null? l/), (/atom?/ (/car l/)), and *else*.
2. Use /cons/ to build lists.
3. When building a list, describe the first typical element, and then /cons/ it onto the natural recursion.
4. Always change at least one argument while recurring.
   When recurring on a list of atoms /lat/, use (/cdr lat/).
   When recurring on a number, /n/, use (/sub1 n/).
   When recurring on a list of S-expressions, /l/, use (/car l/) and (/cdr l/) if neither (/null? l/) nor (/atom?/ (/car l/)) are true.
5. When building a value with +, always use 0 for the value of the terminating line; adding 0 does not change the value of an addition.
   When building a value with *, always use 1 for the value of the terminating line; multiplying by 1 does not change the value of a multiplication.
   When building a value with /cons/, always consider () for the value of the terminating line.
6. Simplify only after the function is correct.
7. Recur on /subparts/ of the same nature:
   - On the sublists of a list.
   - On the subexpressions of an arithmetic expression.
8. Use helper functions to abstract from representations.
9. Abstract common patterns with a new function.
10. Build functions to collect more than one value at a time.
* Laws
** The Law of /Car/
The primitive /car/ is defined only for non-empty lists
** The Law of /Cdr/
The primitive /cdr/ is defined only for non-empty lists.
The /cdr/ of any non-empty list is always another list.
** The Law of /Cons/
The primitive /cons/ takes two arguments.
The second agrument to /cons/ must be a list.
The result is a list.
** The Law of /Null/
The primitive /null?/ is defined only for lists.
** The Law of /Eq?/
The primitive /eq?/ takes two arguments; each must be a non-numeric atom.
* First Chapter
** Atom
An atom is any single non-list unit
All Atoms are S-Expressions
** List
All lists are S-Expressions
Lists must be enclosed by parentheses
Lists are composed of other S-expressions
** S-Expressions
All Atoms are S-Expressions
All lists are S-Expressions?
** ()
This is the empty list
Is a list, not an atom
** Car
Takes the first element of a list
You cannot ask for the /car/ of an atom; an atom is not a list
Can be called on any non-empty list
** Cdr
Cannot take an atom as an agrument ([[The Law of /Cdr/][See the Law of Cdr]])
Can be called on any non-empty list
** Cons
Used to build lists
Takes an S-Expression and a List as an agrument
** Null?
True for an empty (null) list
You cannot ask /null?/ of an atom (In practice, /null?/ returnse false for all but the empty list)
** Atom?
False for any list, including the empty one
Takes a single argument in the form of any S-expression
** Eq?
Just another way to ask, "Are atoms a1 and a2 the same non-numeric atom?"
Essentially a pointer comparison
Takes two arguments, both of which must be non-numeric atoms
* Second Chapter
** Lat?
/lat?/ is recursively defined to look at the first S-expression of a list. If the /car/ of the list is an atom, it calls itself on the /cdr/ of the list. So long as each member of the list is an atom, eventually the function will recurse to the point that it is passed the empty list, which returns true. If at any point the /car/ of the list is not an atom, the function will return false.
** Or
/or/ asks two questions, one at a time. If the first is true, it stops and answers true. Otherwise, it askes the second question and answers with whatever the second question answers.
** Member?
