* Book Introduction
Assumed Definitions:
- atom?
  #+begin_src scheme
  (define atom?
  (lambda (x)
      (and (not (pair? x)) (not (null? x)))))
  #+end_src
- add1
  #+begin_src scheme
  (define add1
  (lambda (x)
      (+ x 1)))
  #+end_src
- sub1
  #+begin_src scheme
  (define sub1
    (lambda (x)
      (- x 1)))
  #+end_src
* Ten Commandments
1. When recurring on a list of atoms, /lat/, ask two questions about it: (/null? lat/) and *else*.
   When recurring on a number, /n/, ask two questions about it: (/zero? n/) and *else*.
   When recurring on a list of S-expressions, /l/, ask three questions about it: (/null? l/), (/atom?/ (/car l/)), and *else*.
2. Use /cons/ to build lists.
3. When building a list, describe the first typical element, and then /cons/ it onto the natural recursion.
4. Always change at least one argument while recurring.
   When recurring on a list of atoms /lat/, use (/cdr lat/).
   When recurring on a number, /n/, use (/sub1 n/).
   When recurring on a list of S-expressions, /l/, use (/car l/) and (/cdr l/) if neither (/null? l/) nor (/atom?/ (/car l/)) are true.
5. When building a value with +, always use 0 for the value of the terminating line; adding 0 does not change the value of an addition.
   When building a value with *, always use 1 for the value of the terminating line; multiplying by 1 does not change the value of a multiplication.
   When building a value with /cons/, always consider () for the value of the terminating line.
6. Simplify only after the function is correct.
7. Recur on /subparts/ of the same nature:
   - On the sublists of a list.
   - On the subexpressions of an arithmetic expression.
8. Use helper functions to abstract from representations.
9. Abstract common patterns with a new function.
10. Build functions to collect more than one value at a time.
* Laws
** The Law of /Car/
The primitive /car/ is defined only for non-empty lists
** The Law of /Cdr/
The primitive /cdr/ is defined only for non-empty lists.
The /cdr/ of any non-empty list is always another list.
* First Chapter
- Atom
  An atom is any single non-list unit
  All Atoms are S-Expressions
- List
  All lists are S-Expressions
  Lists must be enclosed by parentheses
  Lists are composed of other S-expressions
- S-Expressions
  All Atoms are S-Expressions
  All lists are S-Expressions?
- ()
  This is the empty list
  Is a list, not an atom
- Car
  Takes the first element of a list
  You cannot ask for the /car/ of an atom; an atom is not a list
  You cannot ask for the /car/ of a list
